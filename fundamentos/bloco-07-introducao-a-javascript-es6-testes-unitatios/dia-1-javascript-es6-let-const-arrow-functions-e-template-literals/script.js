// Parte I
// Agora voc√™ vai fazer alguns exerc√≠cios de fixa√ß√£o.
// Fa√ßa as modifica√ß√µes necess√°rias na fun√ß√£o para que o seu comportamento respeite o escopo no qual cada vari√°vel foi declarada.
// Modifique a estrutura da fun√ß√£o para que ela seja uma arrow function .
// Modifique as concatena√ß√µes para template literals .

const testingScope = (escopo) => {
    if (escopo === true) {
      let ifScope = 'N√£o devo ser utilizada fora do meu escopo (if)';
      ifScope = `${ifScope} √≥timo, fui utilizada no escopo !`;
      console.log(ifScope);
    } else {
      let elseScope = 'N√£o devo ser utilizada fora meu escopo (else)';
      console.log(elseScope);
    }    
  }

  console.log(testingScope(true));


// fa√ßa uma fun√ß√£o que retorne o array oddsAndEvens em ordem crescente.
// Utilize template literals para que a chamada console.log(<seu c√≥digo>oddsAndEvens<seu c√≥digo>); retorne "Os n√∫meros 2,3,4,7,10,13 se encontram ordenados de forma crescente!".
// B√¥nus (opcional): tente fazer o mesmo exerc√≠cio utilizando o m√©todo array.sort() . Spoiler: √â poss√≠vel realizar uma fun√ß√£o que ordene qualquer array de n√∫meros.

const oddsAndEvens = [13, 3, 4, 10, 7, 2];

const sort = (arr) => {
return arr.sort((a, b) => a - b)
}

console.log(`Os n√∫meros ${sort(oddsAndEvens)} se encontram ordenados de forma crescente!`); // ser√° necess√°rio alterar essa linha üòâ

// Parte II
// Abaixo, voc√™ ver√° algumas especifica√ß√µes de algoritmos para desenvolver. √â fundamental que voc√™ utilize o que aprendeu sobre let , const , arrow functions , template literals e ternary operator .
// Crie uma fun√ß√£o que receba um n√∫mero e retorne seu fatorial.
// Na matem√°tica, o fatorial de um n√∫mero n√£o negativo N , com a nota√ß√£o N! , √© o produto de todos os inteiros menores ou iguais a N . Exemplo: 4! = 4 * 3 * 2 * 1 = 24.
// B√¥nus (opcional): tente fazer o mesmo exerc√≠cio de forma recursiva . Spoiler: √â poss√≠vel resolver com uma linha usando ternary operator .

const factorial = (n) => {  
  const factiorial = n === 0 ? 1 : n * factorial(n -1);
  return factiorial    
}

console.log(factorial(4))

// Crie uma fun√ß√£o que receba uma frase e retorne qual a maior palavra.

const longestWord = (str) => {
  const arr = str.split(' ');
  const length = [];
  for (let i = 0; i < arr.length; i++) {
    length.push(arr[i].length);
  }
  const maxLength = Math.max(...length);
  for (let i = 0; i < arr.length; i++) {
    if (arr[i].length === maxLength) {return console.log(arr[i])}
  }
}

longestWord('Ant√¥nio foi no banheiro e n√£o sabemos o que aconteceu')